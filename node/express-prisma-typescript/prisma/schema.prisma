// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")

  reactions Reaction[]

  publicAccount Boolean @default(true)
}

model Follow {
  // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@id([followerId, followedId])
  @@unique([followerId, followedId])
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  isComment Boolean @default(false)

  postId   String? @db.Uuid
  post     Post?   @relation("PostComments", fields: [postId], references: [id])
  comments Post[]  @relation("PostComments")

  reactions Reaction[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
}

// A post can have zero or more reactions
// An user can have zero or more reactions
// But a reaction must always can have an user and a post

// I use a composite key because a reaction cant repeat the combination (user, post, type)
// For example: if you already have (Mateo, Post1, LIKE) you cant have another (Mateo, Post1, LIKE)
// But you can have (Mateo, Post1, RETWEET)
model Reaction {
  postId String @db.Uuid

  type ReactionType

  post   Post   @relation(fields: [postId], references: [id]) // One post have many reactions
  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@id([postId, userId, type])
  @@unique([postId, userId, type])
}

enum ReactionType {
  LIKE
  RETWEET
}
